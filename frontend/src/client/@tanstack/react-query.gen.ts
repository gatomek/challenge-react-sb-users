// This file is auto-generated by @hey-api/openapi-ts

import { type Options, deleteUser, updateUser, getUsers, addUser } from '../sdk.gen';
import { type UseMutationOptions, type DefaultError, queryOptions } from '@tanstack/react-query';
import type { DeleteUserData, UpdateUserData, UpdateUserResponse, GetUsersData, AddUserData, AddUserResponse } from '../types.gen';
import { client as _heyApiClient } from '../client.gen';

export const deleteUserMutation = (options?: Partial<Options<DeleteUserData>>): UseMutationOptions<unknown, DefaultError, Options<DeleteUserData>> => {
    const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<DeleteUserData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await deleteUser({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const updateUserMutation = (options?: Partial<Options<UpdateUserData>>): UseMutationOptions<UpdateUserResponse, DefaultError, Options<UpdateUserData>> => {
    const mutationOptions: UseMutationOptions<UpdateUserResponse, DefaultError, Options<UpdateUserData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await updateUser({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
        tags?: ReadonlyArray<string>;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, infinite?: boolean, tags?: ReadonlyArray<string>): [
    QueryKey<TOptions>[0]
] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseUrl: options?.baseUrl || (options?.client ?? _heyApiClient).getConfig().baseUrl } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (tags) {
        params.tags = tags;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return [
        params
    ];
};

export const getUsersQueryKey = (options?: Options<GetUsersData>) => createQueryKey('getUsers', options);

export const getUsersOptions = (options?: Options<GetUsersData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getUsers({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getUsersQueryKey(options)
    });
};

export const addUserMutation = (options?: Partial<Options<AddUserData>>): UseMutationOptions<AddUserResponse, DefaultError, Options<AddUserData>> => {
    const mutationOptions: UseMutationOptions<AddUserResponse, DefaultError, Options<AddUserData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await addUser({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};